@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>

<style>
    .container {
        background: rgba(255, 255, 255, 0.2) !important;
        backdrop-filter: blur(20px) brightness(1.3);
        -webkit-backdrop-filter: blur(20px) brightness(1.3);
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
        color: #000 !important;
        max-width: 700px;
        margin-left: auto;
        margin-right: auto;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

    .table th,
    .table td {
        padding: 0.75rem 1rem;
        border: 1px solid rgba(255, 255, 255, 0.4);
        background: rgba(255, 255, 255, 0.6);
        color: #111;
        font-weight: 500;
    }

    .table th {
        background: rgba(255, 255, 255, 0.85);
        font-weight: bold;
        color: #000;
    }

    .custom-header {
        text-align: center;
        font-size: 1.75rem;
        margin-bottom: 1rem;
        padding: 0.75rem;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 12px;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.4);
        color: #000;
    }

    .btn-warning, .btn-secondary {
        margin-right: 0.5rem;
        font-weight: bold;
        border-radius: 8px;
    }
	
	
	/* Cyan Details Button Glow */
	.btn-info {
		background: rgba(0, 255, 255, 0.8);
		border-color: rgba(0, 255, 255, 0.8);
		box-shadow: 0 0 15px rgba(0, 255, 255, 1);
	}
	
	.custom-btn {
			background: rgba(0, 0, 0, 0.6); /* same as navbar */
			border: 1px solid rgba(0, 255, 255, 0.6);
			color: white;
			font-weight: bold;
			backdrop-filter: blur(4px);
			text-shadow: 2px 2px 5px rgba(255, 255, 255, 0.5);
			transition: all 0.3s ease;
	}
	
	.custom-btn:hover {
			background: rgba(0, 255, 255, 0.8);
			border-color: rgba(0, 255, 255, 0.8);
			box-shadow: 0 0 15px rgba(0, 255, 255, 0.8);
	}


	/* Magenta Remove Button Glow */
	.btn-danger {
		background: rgba(255, 0, 255, 0.8);
		border-color: rgba(255, 0, 255, 0.8);
		box-shadow: 0 0 15px rgba(255, 0, 255, 1);
	}

	/* Amber Edit Button Glow */
	.btn-warning {
		background: rgba(255, 191, 0, 0.8); 
		border-color: rgba(255, 191, 0, 0.8); 
		box-shadow: 0 0 15px rgba(255, 191, 0, 1); 
	}

</style>

<div class="container">
<table class="table table-sm table-striped table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Price</th>
            <td />
        </tr>
    </thead>
    <tbody>
        @if (ProductData?.Count() > 0) {
            @foreach (Product p in ProductData) {
                <tr>
                    <td>@p.ProductID</td>
                    <td>@p.Name</td>
                    <td>@p.Category</td>
                    <td>@p.Price.ToString("c")</td>
                    <td>
                        <NavLink class="btn btn-info btn-sm"
                         href="@GetDetailsUrl(p.ProductID ?? 0)">
                            Details
                        </NavLink>
                        <NavLink class="btn btn-warning btn-sm"
                         href="@GetEditUrl(p.ProductID ?? 0)">
                            Edit
                        </NavLink>
                        <button class="btn btn-danger btn-sm"
                                 @onclick="@(e => DeleteProduct(p))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        } else {
            <tr>
                <td colspan="5" class="text-center">No Products</td>
            </tr>
        }
    </tbody>
</table>
</div>

<NavLink class="btn custom-btn" href="/admin/products/create">
    Create
</NavLink>

@code {

    public IStoreRepository Repository => Service;

    public IEnumerable<Product> ProductData { get; set; }
        = Enumerable.Empty<Product>();

    protected async override Task OnInitializedAsync() {
        await UpdateData();
    }

    public async Task UpdateData() {
        ProductData = await Repository.Products.ToListAsync();
    }

    public async Task DeleteProduct(Product p) {
        Repository.DeleteProduct(p);
        await UpdateData();
    }

    public string GetDetailsUrl(long id) => 
        $"/admin/products/details/{id}";
    public string GetEditUrl(long id) => 
        $"/admin/products/edit/{id}";
}
