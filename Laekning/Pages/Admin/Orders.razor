@page "/admin/orders"
@inherits OwningComponentBase<IOrderRepository>

<style>
    .container {
        background: rgba(255, 255, 255, 0.2) !important;
        backdrop-filter: blur(20px) brightness(1.3);
        -webkit-backdrop-filter: blur(20px) brightness(1.3);
        border-radius: 15px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
        color: #000 !important;
        max-width: 700px;
        margin-left: auto;
        margin-right: auto;
    }
	
	.custom-btn {
			background: rgba(0, 0, 0, 0.6); /* same as navbar */
			border: 1px solid rgba(0, 255, 255, 0.6);
			color: white;
			font-weight: bold;
			backdrop-filter: blur(4px);
			text-shadow: 2px 2px 5px rgba(255, 255, 255, 0.5);
			transition: all 0.3s ease;
	}
	
	.custom-btn:hover {
			
			box-shadow: 0 0 15px rgba(0, 255, 255, 0.8);
	}
	

</style>

<div class="container">

<OrderTable TableTitle="Unshipped Orders" Orders="UnshippedOrders" 
            ButtonLabel="Ship" OrderSelected="ShipOrder" />
<OrderTable TableTitle="Shipped Orders" Orders="ShippedOrders" 
            ButtonLabel="Reset" OrderSelected="ResetOrder" />
<button class="btn custom-btn" @onclick="@(e => UpdateData())">
    Refresh Data
</button>

</div>

@code {

    public IOrderRepository Repository => Service;

    public IEnumerable<Order> AllOrders { get; set; } 
        = Enumerable.Empty<Order>();
    public IEnumerable<Order> UnshippedOrders { get; set; }
        = Enumerable.Empty<Order>();
    public IEnumerable<Order> ShippedOrders { get; set; }
        = Enumerable.Empty<Order>();

    protected async override Task OnInitializedAsync() {
        await UpdateData();
    }

    public async Task UpdateData() {
        AllOrders = await Repository.Orders.ToListAsync();
        UnshippedOrders = AllOrders.Where(o => !o.Shipped);
        ShippedOrders = AllOrders.Where(o => o.Shipped);
    }

    public void ShipOrder(int id) => UpdateOrder(id, true);
    public void ResetOrder(int id) => UpdateOrder(id, false);

    private void UpdateOrder(int id, bool shipValue) {
        Order? o = Repository.Orders.FirstOrDefault(o => o.OrderID == id);
        if (o != null) {
            o.Shipped = shipValue;
            Repository.SaveOrder(o);
        }
    }
}
